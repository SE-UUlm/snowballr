
services:
  database:
    image: postgres:16.1-alpine3.19
    env_file: database.env
    ports:
        - 5432:5432
    volumes:
        - ${WORK_DIR:?error}/database:/var/lib/postgresql/data
    networks:
        - snowballr-network

  frontend-mock:
    image: ghcr.io/se-uulm/snowballr-frontend:latest-dev
    env_file: frontend-mock.env
    networks:
    - snowballr-network

  frontend:
    image: ghcr.io/se-uulm/snowballr-frontend:latest-dev
    env_file: frontend.env
    networks:
      - snowballr-network

  api-docs:
    image: ghcr.io/se-uulm/snowballr-api/docs:main
    hostname: "api-docs"
    networks:
      - snowballr-network

  backend-mock:
    image: ghcr.io/se-uulm/snowballr-mock-backend:main
    env_file: backend-mock.env
    networks:
        - snowballr-network

  backend:
    image: ghcr.io/se-uulm/snowballr-backend:latest-dev
    env_file: backend.env
    networks:
      - snowballr-network

  caddy:
    image: caddy:2.10.0
    environment:
      PROD_DOMAIN: ${PROD_DOMAIN:?error}
      DEV_DOMAIN: ${DEV_DOMAIN:?error}
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"
    volumes:
      - ${WORK_DIR:?error}/Caddyfile:/etc/caddy/Caddyfile
      - ${WORK_DIR:?error}/runtime/caddy/data:/data
      - ${WORK_DIR:?error}/runtime/caddy/config:/config
    networks:
      - snowballr-network
      - snowballr-host

  proxy:
    build:
        context: .
        dockerfile: Dockerfile.proxy
    ports:
        - "${WEB_PORT:-8081}:${WEB_PORT:-8081}"
    command:
        # Point to the backend on the machine's host
        - --backend_addr=host.docker.internal:${PORT:-8080}
        - --allowed_origins=http?://${PROD_DOMAIN}
        - --run_tls_server=false # Don't require TLS Handled by proxy

networks:
  snowballr-network:
    name: snowballr-network
    driver: ipvlan
    internal: true
    external: false

  snowballr-host:
    name: snowballr-host
    driver: bridge
    internal: false
    external: false

